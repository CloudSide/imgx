#error_log stderr notice;
#error_log stderr error;
#daemon on;

user	imgx imgx;

error_log		logs/error.log error;
# pid				logs/nginx.pid;

worker_processes			16;
worker_rlimit_nofile	65536;
# worker_rlimit_nofile	4096;


events {
	use epoll;
	accept_mutex  off;
	worker_connections  20480;
	multi_accept on;
}


http {

	lua_shared_dict keychain 256m;
	lua_shared_dict processing_locks 256m;
	lua_shared_dict clean_cache_locks 256m;
	lua_shared_dict resolver_cache 8m;
	lua_package_path "src/lib/?.lua;src/?.lua;;";
	include resolvers.conf;
	include /usr/local/openresty/nginx/conf/mime.types;
	#default_type text/json;
	keepalive_timeout 60;

	lua_code_cache on;

	init_by_lua '
		Config = require "config"
		Cjson = require "cjson.safe"
	';

	lua_socket_read_timeout 60s;
	lua_socket_pool_size 65536;
	lua_socket_keepalive_timeout 60s;
	lua_socket_buffer_size 16m;


	server {

		listen 80;

		#server_name;
		lua_code_cache on;
		expires 7d;
		more_clear_headers 'X-Powered-By' 'Powered-By';
		more_set_headers "Server: imgx/0.9.1-dev";
		root htdocs;
		set $scs_cache_path_prefix '/imgx/cache/';
		set $scs_accesskey '';
		set $scs_secretkey '';
		set $scs_bucket '-';
		set $scs_key '';
		set $scs_cmd '';
		set $scs_style '';
		set_by_lua $raw_uri '
			local req_uri = ngx.var.request_uri
			if req_uri then
				local raw_uri = req_uri:gsub("?.*", "")
				return raw_uri
			else
				return "/"
			end
		';
		set_by_lua $requestid '
			local function format(m)
				return string.format("%.2x", m[1])
			end
			local perfix = ngx.var.server_addr .. "-" .. (ngx.req.get_headers()["Cdn-Src-Ip"] or ngx.req.get_headers()["X-Forwarded-For"] or ngx.var.remote_addr)
			return ngx.re.gsub(perfix, "([0-9]+)\\\.?", format, "i") ..
			"-" .. ngx.req.start_time()
		';
		set $hitinfo '-';


		log_by_lua '
			require("util").clean_tmp_pool()
		';

		location / {
			access_by_lua_file "src/access.lua";
		}

		location ~ ^/fonts$ {
			content_by_lua '
				local mtype = require("magick_type")
				local json = Cjson.encode(mtype.get_font_table())
				ngx.print(json)
			';
		}

		location ~ ^/dns$ {
			content_by_lua '
				local ip_list = require("util").resolver_query("sinastorage.com")
				local json = Cjson.encode(ip_list)
				ngx.print(json)
			';
		}

		location ~ ^/favicon.ico$ {
			root html;
		}

		location ~ ^/50x\.html$ {
			root html;
			internal;
		}

		location ~ ^/imgx/cache/(?<cache_file>.+)$ {
			root cache;
			try_files /$cache_file /50x.html;
			etag off;
			#more_clear_headers 'ETag';
			#more_set_headers "Etag: 123";
			#internal;
			set_by_lua $hitinfo '
				return ngx.header["X-Imgx-HitInfo"]
			';
			set $scs_bucket $arg_bucket;
		}

		error_page 400 404 413 500 502 503 504 /50x.html;
		client_max_body_size 1k;

	}

	log_format combined1
	'$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
	'"$http_referer" "$http_user_agent"';

	log_format dip_www
	'$host $remote_addr $request_time $hitinfo [$time_local] '
	'"$request" $status $body_bytes_sent '
	'"$http_referer" "$http_x_forwarded_for" "$http_cookie" '
	'"$http_user_agent" $server_port $requestid $scs_bucket';

	log_format  main
    '$remote_addr - $remote_user $host:$server_port [$time_local] "$request" '
    '$status $body_bytes_sent $request_time "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

	access_log logs/access.log dip_www;

}
